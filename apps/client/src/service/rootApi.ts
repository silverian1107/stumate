/* eslint-disable prefer-const */
import { logout } from "../redux/slices/authSlice";
import { createApi, fetchBaseQuery, BaseQueryFn, FetchArgs, FetchBaseQueryError } from "@reduxjs/toolkit/query/react";
import  {RootState}  from "../redux/store"; // Assuming you have a RootState type defined for Redux state

// Define the base query with token handling
const baseQuery = fetchBaseQuery({
  baseUrl: '', // Add your base URL here
  prepareHeaders: (headers, { getState }) => {
    const token = (getState() as RootState).auth.accessToken;
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }
    return headers;
  }
});

// Extend base query to handle forced logout on unauthorized errors
const baseQueryWithForceLogout: BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError> = async (args, api, extraOptions) => {
  let result = await baseQuery(args, api, extraOptions);
  if (result?.error?.status === 401) {
    api.dispatch(logout());
    // Clear all data in storage if needed
    // await persistor.purge();
    window.location.href = "/login";
  }
  return result;
};

// Define API service with types for each endpoint
export const rootApi = createApi({
  reducerPath: "api",
  baseQuery: baseQueryWithForceLogout,
  endpoints: (builder) => ({
    register: builder.mutation<{ token: string }, { fullName: string; email: string; password: string }>({
      query: ({ fullName, email, password }) => ({
        url: "/signup",
        body: { fullName, email, password },
        method: "POST",
      }),
    }),
    login: builder.mutation<{ token: string }, { email: string; password: string }>({
      query: ({ email, password }) => ({
        url: "/login",
        body: { email, password },
        method: "POST",
      }),
    }),
    verifyOTP: builder.mutation<{ success: boolean }, { email: string; otp: string }>({
      query: ({ email, otp }) => ({
        url: '/verify-otp',
        body: { email, otp },
        method: "POST",
      }),
    }),
    getAuthUser: builder.query<{ id: string; email: string; fullName: string }, void>({
      query: () => '/auth-user',
    }),
  }),
});

// Export hooks generated by RTK Query for each endpoint
export const { useRegisterMutation, useLoginMutation, useVerifyOTPMutation, useGetAuthUserQuery } = rootApi;
